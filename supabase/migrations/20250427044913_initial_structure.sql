create table "public"."account_types" (
    "id" uuid not null default gen_random_uuid(),
    "name" text not null
);


alter table "public"."account_types" enable row level security;

create table "public"."accounts" (
    "id" uuid not null default gen_random_uuid(),
    "household_id" uuid not null,
    "created_by_user_id" uuid not null,
    "name" text not null,
    "account_type_id" uuid not null,
    "initial_balance" numeric(10,2) not null default 0.00,
    "initial_balance_date" timestamp with time zone not null default now(),
    "created_at" timestamp with time zone default now()
);


alter table "public"."accounts" enable row level security;

create table "public"."categories" (
    "id" uuid not null default gen_random_uuid(),
    "household_id" uuid not null,
    "created_by_user_id" uuid not null,
    "name" text not null,
    "type" text not null,
    "created_at" timestamp with time zone default now()
);


alter table "public"."categories" enable row level security;

create table "public"."household_members" (
    "household_id" uuid not null,
    "user_id" uuid not null,
    "role" text not null default 'member'::text,
    "joined_at" timestamp with time zone default now()
);


alter table "public"."household_members" enable row level security;

create table "public"."households" (
    "id" uuid not null default gen_random_uuid(),
    "name" text not null,
    "created_at" timestamp with time zone default now()
);


alter table "public"."households" enable row level security;

create table "public"."todos" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "content" text default ''::text
);


alter table "public"."todos" enable row level security;

create table "public"."transactions" (
    "id" uuid not null default gen_random_uuid(),
    "household_id" uuid not null,
    "created_by_user_id" uuid not null,
    "account_id" uuid not null,
    "category_id" uuid,
    "amount" numeric(10,2) not null,
    "description" text,
    "transaction_date" timestamp with time zone not null default now(),
    "status" text not null default 'completed'::text,
    "created_at" timestamp with time zone default now()
);


alter table "public"."transactions" enable row level security;

create table "public"."users" (
    "id" uuid not null,
    "email" text not null,
    "first_name" text,
    "last_name" text,
    "avatar_url" text,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX account_types_name_key ON public.account_types USING btree (name);

CREATE UNIQUE INDEX account_types_pkey ON public.account_types USING btree (id);

CREATE UNIQUE INDEX accounts_pkey ON public.accounts USING btree (id);

CREATE UNIQUE INDEX categories_household_id_name_type_key ON public.categories USING btree (household_id, name, type);

CREATE UNIQUE INDEX categories_pkey ON public.categories USING btree (id);

CREATE UNIQUE INDEX household_members_household_id_user_id_key ON public.household_members USING btree (household_id, user_id);

CREATE UNIQUE INDEX household_members_pkey ON public.household_members USING btree (household_id, user_id);

CREATE UNIQUE INDEX households_pkey ON public.households USING btree (id);

CREATE UNIQUE INDEX todos_pkey ON public.todos USING btree (id);

CREATE UNIQUE INDEX transactions_pkey ON public.transactions USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."account_types" add constraint "account_types_pkey" PRIMARY KEY using index "account_types_pkey";

alter table "public"."accounts" add constraint "accounts_pkey" PRIMARY KEY using index "accounts_pkey";

alter table "public"."categories" add constraint "categories_pkey" PRIMARY KEY using index "categories_pkey";

alter table "public"."household_members" add constraint "household_members_pkey" PRIMARY KEY using index "household_members_pkey";

alter table "public"."households" add constraint "households_pkey" PRIMARY KEY using index "households_pkey";

alter table "public"."todos" add constraint "todos_pkey" PRIMARY KEY using index "todos_pkey";

alter table "public"."transactions" add constraint "transactions_pkey" PRIMARY KEY using index "transactions_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."account_types" add constraint "account_types_name_key" UNIQUE using index "account_types_name_key";

alter table "public"."accounts" add constraint "accounts_account_type_id_fkey" FOREIGN KEY (account_type_id) REFERENCES account_types(id) not valid;

alter table "public"."accounts" validate constraint "accounts_account_type_id_fkey";

alter table "public"."accounts" add constraint "accounts_created_by_user_id_fkey" FOREIGN KEY (created_by_user_id) REFERENCES auth.users(id) not valid;

alter table "public"."accounts" validate constraint "accounts_created_by_user_id_fkey";

alter table "public"."accounts" add constraint "accounts_household_id_fkey" FOREIGN KEY (household_id) REFERENCES households(id) not valid;

alter table "public"."accounts" validate constraint "accounts_household_id_fkey";

alter table "public"."categories" add constraint "categories_created_by_user_id_fkey" FOREIGN KEY (created_by_user_id) REFERENCES auth.users(id) not valid;

alter table "public"."categories" validate constraint "categories_created_by_user_id_fkey";

alter table "public"."categories" add constraint "categories_household_id_fkey" FOREIGN KEY (household_id) REFERENCES households(id) not valid;

alter table "public"."categories" validate constraint "categories_household_id_fkey";

alter table "public"."categories" add constraint "categories_household_id_name_type_key" UNIQUE using index "categories_household_id_name_type_key";

alter table "public"."categories" add constraint "categories_type_check" CHECK ((type = ANY (ARRAY['income'::text, 'expense'::text]))) not valid;

alter table "public"."categories" validate constraint "categories_type_check";

alter table "public"."household_members" add constraint "household_members_household_id_fkey" FOREIGN KEY (household_id) REFERENCES households(id) not valid;

alter table "public"."household_members" validate constraint "household_members_household_id_fkey";

alter table "public"."household_members" add constraint "household_members_household_id_user_id_key" UNIQUE using index "household_members_household_id_user_id_key";

alter table "public"."household_members" add constraint "household_members_role_check" CHECK ((role = ANY (ARRAY['owner'::text, 'member'::text]))) not valid;

alter table "public"."household_members" validate constraint "household_members_role_check";

alter table "public"."household_members" add constraint "household_members_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."household_members" validate constraint "household_members_user_id_fkey";

alter table "public"."transactions" add constraint "transactions_account_id_fkey" FOREIGN KEY (account_id) REFERENCES accounts(id) not valid;

alter table "public"."transactions" validate constraint "transactions_account_id_fkey";

alter table "public"."transactions" add constraint "transactions_category_id_fkey" FOREIGN KEY (category_id) REFERENCES categories(id) not valid;

alter table "public"."transactions" validate constraint "transactions_category_id_fkey";

alter table "public"."transactions" add constraint "transactions_created_by_user_id_fkey" FOREIGN KEY (created_by_user_id) REFERENCES auth.users(id) not valid;

alter table "public"."transactions" validate constraint "transactions_created_by_user_id_fkey";

alter table "public"."transactions" add constraint "transactions_household_id_fkey" FOREIGN KEY (household_id) REFERENCES households(id) not valid;

alter table "public"."transactions" validate constraint "transactions_household_id_fkey";

alter table "public"."transactions" add constraint "transactions_status_check" CHECK ((status = ANY (ARRAY['pending'::text, 'completed'::text, 'canceled'::text]))) not valid;

alter table "public"."transactions" validate constraint "transactions_status_check";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "users_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.fn_create_household_for_user(user_id uuid, household_name text)
 RETURNS uuid
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
  new_household_id UUID;
BEGIN
  -- Create a new household
  INSERT INTO households (name)
  VALUES (household_name)
  RETURNING id INTO new_household_id;

  -- Add the user as an owner
  INSERT INTO household_members (household_id, user_id, role)
  VALUES (new_household_id, user_id, 'owner');

  RETURN new_household_id;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.fn_ensure_user_in_household(user_id uuid, user_first_name text)
 RETURNS uuid
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
  existing_household_id UUID;
  new_household_id UUID;
  user_household_count INT;
BEGIN
  -- Check if the user is already in a household
  SELECT COUNT(*) INTO user_household_count
  FROM household_members
  WHERE household_members.user_id = fn_ensure_user_in_household.user_id;
  
  -- If user is already in a household, return that household id
  IF user_household_count > 0 THEN
    SELECT household_id INTO existing_household_id
    FROM household_members
    WHERE household_members.user_id = fn_ensure_user_in_household.user_id
    LIMIT 1;
    RETURN existing_household_id;
  END IF;
  
  -- Check if any household exists
  SELECT id INTO existing_household_id
  FROM households
  LIMIT 1;
  
  -- If a household exists, add the user as a member
  IF existing_household_id IS NOT NULL THEN
    INSERT INTO household_members (household_id, user_id, role)
    VALUES (existing_household_id, fn_ensure_user_in_household.user_id, 'member');
    RETURN existing_household_id;
  END IF;
  
  -- No household exists, create a new one with the user as owner
  INSERT INTO households (name)
  VALUES (COALESCE(user_first_name, 'My') || '''s Household')
  RETURNING id INTO new_household_id;
  
  -- Add the user as an owner
  INSERT INTO household_members (household_id, user_id, role)
  VALUES (new_household_id, fn_ensure_user_in_household.user_id, 'owner');
  
  RETURN new_household_id;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.fn_get_account_balance(p_account_id uuid)
 RETURNS numeric
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
  v_initial_balance NUMERIC;
  v_transactions_sum NUMERIC;
BEGIN
  -- Get initial balance
  SELECT a.initial_balance INTO v_initial_balance
  FROM accounts a
  WHERE a.id = p_account_id;

  -- Get sum of transactions
  SELECT COALESCE(SUM(t.amount), 0) INTO v_transactions_sum
  FROM transactions t
  WHERE t.account_id = p_account_id
  AND t.status = 'completed';

  -- Return the sum
  RETURN v_initial_balance + v_transactions_sum;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  INSERT INTO public.users (
    id, 
    email, 
    first_name, 
    last_name
  )
  VALUES (
    NEW.id, 
    NEW.email, 
    (NEW.raw_user_meta_data->>'first_name')::text, 
    (NEW.raw_user_meta_data->>'last_name')::text
  );
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.is_household_member(household_uuid uuid)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  RETURN EXISTS (
    SELECT 1 
    FROM public.household_members
    WHERE household_id = household_uuid 
    AND user_id = auth.uid()
  );
END;
$function$
;

CREATE OR REPLACE FUNCTION public.is_household_owner(household_uuid uuid)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  RETURN EXISTS (
    SELECT 1 
    FROM public.household_members
    WHERE household_id = household_uuid 
    AND user_id = auth.uid()
    AND role = 'owner'
  );
END;
$function$
;

grant delete on table "public"."account_types" to "anon";

grant insert on table "public"."account_types" to "anon";

grant references on table "public"."account_types" to "anon";

grant select on table "public"."account_types" to "anon";

grant trigger on table "public"."account_types" to "anon";

grant truncate on table "public"."account_types" to "anon";

grant update on table "public"."account_types" to "anon";

grant delete on table "public"."account_types" to "authenticated";

grant insert on table "public"."account_types" to "authenticated";

grant references on table "public"."account_types" to "authenticated";

grant select on table "public"."account_types" to "authenticated";

grant trigger on table "public"."account_types" to "authenticated";

grant truncate on table "public"."account_types" to "authenticated";

grant update on table "public"."account_types" to "authenticated";

grant delete on table "public"."account_types" to "service_role";

grant insert on table "public"."account_types" to "service_role";

grant references on table "public"."account_types" to "service_role";

grant select on table "public"."account_types" to "service_role";

grant trigger on table "public"."account_types" to "service_role";

grant truncate on table "public"."account_types" to "service_role";

grant update on table "public"."account_types" to "service_role";

grant delete on table "public"."accounts" to "anon";

grant insert on table "public"."accounts" to "anon";

grant references on table "public"."accounts" to "anon";

grant select on table "public"."accounts" to "anon";

grant trigger on table "public"."accounts" to "anon";

grant truncate on table "public"."accounts" to "anon";

grant update on table "public"."accounts" to "anon";

grant delete on table "public"."accounts" to "authenticated";

grant insert on table "public"."accounts" to "authenticated";

grant references on table "public"."accounts" to "authenticated";

grant select on table "public"."accounts" to "authenticated";

grant trigger on table "public"."accounts" to "authenticated";

grant truncate on table "public"."accounts" to "authenticated";

grant update on table "public"."accounts" to "authenticated";

grant delete on table "public"."accounts" to "service_role";

grant insert on table "public"."accounts" to "service_role";

grant references on table "public"."accounts" to "service_role";

grant select on table "public"."accounts" to "service_role";

grant trigger on table "public"."accounts" to "service_role";

grant truncate on table "public"."accounts" to "service_role";

grant update on table "public"."accounts" to "service_role";

grant delete on table "public"."categories" to "anon";

grant insert on table "public"."categories" to "anon";

grant references on table "public"."categories" to "anon";

grant select on table "public"."categories" to "anon";

grant trigger on table "public"."categories" to "anon";

grant truncate on table "public"."categories" to "anon";

grant update on table "public"."categories" to "anon";

grant delete on table "public"."categories" to "authenticated";

grant insert on table "public"."categories" to "authenticated";

grant references on table "public"."categories" to "authenticated";

grant select on table "public"."categories" to "authenticated";

grant trigger on table "public"."categories" to "authenticated";

grant truncate on table "public"."categories" to "authenticated";

grant update on table "public"."categories" to "authenticated";

grant delete on table "public"."categories" to "service_role";

grant insert on table "public"."categories" to "service_role";

grant references on table "public"."categories" to "service_role";

grant select on table "public"."categories" to "service_role";

grant trigger on table "public"."categories" to "service_role";

grant truncate on table "public"."categories" to "service_role";

grant update on table "public"."categories" to "service_role";

grant delete on table "public"."household_members" to "anon";

grant insert on table "public"."household_members" to "anon";

grant references on table "public"."household_members" to "anon";

grant select on table "public"."household_members" to "anon";

grant trigger on table "public"."household_members" to "anon";

grant truncate on table "public"."household_members" to "anon";

grant update on table "public"."household_members" to "anon";

grant delete on table "public"."household_members" to "authenticated";

grant insert on table "public"."household_members" to "authenticated";

grant references on table "public"."household_members" to "authenticated";

grant select on table "public"."household_members" to "authenticated";

grant trigger on table "public"."household_members" to "authenticated";

grant truncate on table "public"."household_members" to "authenticated";

grant update on table "public"."household_members" to "authenticated";

grant delete on table "public"."household_members" to "service_role";

grant insert on table "public"."household_members" to "service_role";

grant references on table "public"."household_members" to "service_role";

grant select on table "public"."household_members" to "service_role";

grant trigger on table "public"."household_members" to "service_role";

grant truncate on table "public"."household_members" to "service_role";

grant update on table "public"."household_members" to "service_role";

grant delete on table "public"."households" to "anon";

grant insert on table "public"."households" to "anon";

grant references on table "public"."households" to "anon";

grant select on table "public"."households" to "anon";

grant trigger on table "public"."households" to "anon";

grant truncate on table "public"."households" to "anon";

grant update on table "public"."households" to "anon";

grant delete on table "public"."households" to "authenticated";

grant insert on table "public"."households" to "authenticated";

grant references on table "public"."households" to "authenticated";

grant select on table "public"."households" to "authenticated";

grant trigger on table "public"."households" to "authenticated";

grant truncate on table "public"."households" to "authenticated";

grant update on table "public"."households" to "authenticated";

grant delete on table "public"."households" to "service_role";

grant insert on table "public"."households" to "service_role";

grant references on table "public"."households" to "service_role";

grant select on table "public"."households" to "service_role";

grant trigger on table "public"."households" to "service_role";

grant truncate on table "public"."households" to "service_role";

grant update on table "public"."households" to "service_role";

grant delete on table "public"."todos" to "anon";

grant insert on table "public"."todos" to "anon";

grant references on table "public"."todos" to "anon";

grant select on table "public"."todos" to "anon";

grant trigger on table "public"."todos" to "anon";

grant truncate on table "public"."todos" to "anon";

grant update on table "public"."todos" to "anon";

grant delete on table "public"."todos" to "authenticated";

grant insert on table "public"."todos" to "authenticated";

grant references on table "public"."todos" to "authenticated";

grant select on table "public"."todos" to "authenticated";

grant trigger on table "public"."todos" to "authenticated";

grant truncate on table "public"."todos" to "authenticated";

grant update on table "public"."todos" to "authenticated";

grant delete on table "public"."todos" to "service_role";

grant insert on table "public"."todos" to "service_role";

grant references on table "public"."todos" to "service_role";

grant select on table "public"."todos" to "service_role";

grant trigger on table "public"."todos" to "service_role";

grant truncate on table "public"."todos" to "service_role";

grant update on table "public"."todos" to "service_role";

grant delete on table "public"."transactions" to "anon";

grant insert on table "public"."transactions" to "anon";

grant references on table "public"."transactions" to "anon";

grant select on table "public"."transactions" to "anon";

grant trigger on table "public"."transactions" to "anon";

grant truncate on table "public"."transactions" to "anon";

grant update on table "public"."transactions" to "anon";

grant delete on table "public"."transactions" to "authenticated";

grant insert on table "public"."transactions" to "authenticated";

grant references on table "public"."transactions" to "authenticated";

grant select on table "public"."transactions" to "authenticated";

grant trigger on table "public"."transactions" to "authenticated";

grant truncate on table "public"."transactions" to "authenticated";

grant update on table "public"."transactions" to "authenticated";

grant delete on table "public"."transactions" to "service_role";

grant insert on table "public"."transactions" to "service_role";

grant references on table "public"."transactions" to "service_role";

grant select on table "public"."transactions" to "service_role";

grant trigger on table "public"."transactions" to "service_role";

grant truncate on table "public"."transactions" to "service_role";

grant update on table "public"."transactions" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Enable read access for all users"
on "public"."account_types"
as permissive
for select
to public
using (true);


create policy "accounts_delete_policy"
on "public"."accounts"
as permissive
for delete
to public
using ((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE ((household_members.user_id = auth.uid()) AND (household_members.role = 'owner'::text)))));


create policy "accounts_insert_policy"
on "public"."accounts"
as permissive
for insert
to public
with check (((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE (household_members.user_id = auth.uid()))) AND (created_by_user_id = auth.uid())));


create policy "accounts_select_policy"
on "public"."accounts"
as permissive
for select
to public
using ((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE (household_members.user_id = auth.uid()))));


create policy "accounts_update_policy"
on "public"."accounts"
as permissive
for update
to public
using ((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE (household_members.user_id = auth.uid()))));


create policy "categories_delete_policy"
on "public"."categories"
as permissive
for delete
to public
using ((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE ((household_members.user_id = auth.uid()) AND (household_members.role = 'owner'::text)))));


create policy "categories_insert_policy"
on "public"."categories"
as permissive
for insert
to public
with check (((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE (household_members.user_id = auth.uid()))) AND (created_by_user_id = auth.uid())));


create policy "categories_select_policy"
on "public"."categories"
as permissive
for select
to public
using ((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE (household_members.user_id = auth.uid()))));


create policy "categories_update_policy"
on "public"."categories"
as permissive
for update
to public
using ((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE (household_members.user_id = auth.uid()))));


create policy "household_members_delete_policy"
on "public"."household_members"
as permissive
for delete
to public
using (is_household_owner(household_id));


create policy "household_members_insert_policy"
on "public"."household_members"
as permissive
for insert
to public
with check (is_household_owner(household_id));


create policy "household_members_select_policy"
on "public"."household_members"
as permissive
for select
to public
using (((user_id = auth.uid()) OR is_household_member(household_id)));


create policy "households_select_policy"
on "public"."households"
as permissive
for select
to public
using (is_household_member(id));


create policy "Enable read access for all users"
on "public"."todos"
as permissive
for select
to public
using (true);


create policy "transactions_delete_policy"
on "public"."transactions"
as permissive
for delete
to public
using ((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE ((household_members.user_id = auth.uid()) AND (household_members.role = 'owner'::text)))));


create policy "transactions_insert_policy"
on "public"."transactions"
as permissive
for insert
to public
with check (((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE (household_members.user_id = auth.uid()))) AND (created_by_user_id = auth.uid())));


create policy "transactions_select_policy"
on "public"."transactions"
as permissive
for select
to public
using ((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE (household_members.user_id = auth.uid()))));


create policy "transactions_update_policy"
on "public"."transactions"
as permissive
for update
to public
using ((household_id IN ( SELECT household_members.household_id
   FROM household_members
  WHERE (household_members.user_id = auth.uid()))));


create policy "Users can insert their own user data"
on "public"."users"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "Users can update their own user data"
on "public"."users"
as permissive
for update
to public
using ((auth.uid() = id));


create policy "Users can view their own user data"
on "public"."users"
as permissive
for select
to public
using ((auth.uid() = id));



